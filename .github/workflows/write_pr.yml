name: "Auto-Generate PR Description with Local Ollama API"

on:
  pull_request:
    types: [opened, synchronize]  # Trigger on new or updated PRs

jobs:
  generate-pr-description:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to allow diffing with main

      # Step 1: Capture the diff output into a file
      - name: Generate PR diff content
        id: generate_diff
        run: |
          echo "Running git diff between the PR branch and main..."
          git diff origin/main...HEAD > diff_content.txt  # Save diff to a file
          echo "Diff content saved to diff_content.txt"

      # Step 2: Set up Python Environment and Install Dependencies
      - name: Set up Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 3: Run main.py and generate the PR description
      - name: Generate PR Description
        id: generate_pr_description
        env:
          LLAMA_API_URL: "https://abcd1234.ngrok.io/generate"  # Replace with your ngrok URL
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running main.py with diff_content.txt"
          python main.py "diff_content.txt" "${{ github.event.pull_request.number }}"

      # Step 4: Read PR Description from Output File
      - name: Capture PR Description Output
        id: read_pr_description
        run: |
          # Read the PR description from the output file and save it as a GitHub Actions output
          pr_body=$(cat pr_description.txt)
          echo "::set-output name=pr_body::$pr_body"

      # Step 5: Update the Pull Request Body
      - name: Update Pull Request Body
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              body: `${{ steps.read_pr_description.outputs.pr_body }}`
            });
